/**
 * This class is generated by jOOQ
 */
package io.bootique.jooq.demo.generated.tables;


import io.bootique.jooq.demo.generated.Keys;
import io.bootique.jooq.demo.generated.Testdb;
import io.bootique.jooq.demo.generated.tables.records.DomainRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Domain extends TableImpl<DomainRecord> {

    private static final long serialVersionUID = 1337053297;

    /**
     * The reference instance of <code>testdb.domain</code>
     */
    public static final Domain DOMAIN = new Domain();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DomainRecord> getRecordType() {
        return DomainRecord.class;
    }

    /**
     * The column <code>testdb.domain.id</code>.
     */
    public final TableField<DomainRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>testdb.domain.name</code>.
     */
    public final TableField<DomainRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

    /**
     * The column <code>testdb.domain.host</code>.
     */
    public final TableField<DomainRecord, String> HOST = createField("host", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

    /**
     * Create a <code>testdb.domain</code> table reference
     */
    public Domain() {
        this("domain", null);
    }

    /**
     * Create an aliased <code>testdb.domain</code> table reference
     */
    public Domain(String alias) {
        this(alias, DOMAIN);
    }

    private Domain(String alias, Table<DomainRecord> aliased) {
        this(alias, aliased, null);
    }

    private Domain(String alias, Table<DomainRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Testdb.TESTDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DomainRecord, Long> getIdentity() {
        return Keys.IDENTITY_DOMAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DomainRecord> getPrimaryKey() {
        return Keys.KEY_DOMAIN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DomainRecord>> getKeys() {
        return Arrays.<UniqueKey<DomainRecord>>asList(Keys.KEY_DOMAIN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Domain as(String alias) {
        return new Domain(alias, this);
    }

    /**
     * Rename this table
     */
    public Domain rename(String name) {
        return new Domain(name, null);
    }
}
